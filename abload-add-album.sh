#!/bin/bash

# Creates album on Abload.de and fills it with pictures
# so that it is ready to be used in static album
# generated by Pelican.
#
# - Creates album on Abload.de, returning album (gallery) ID
# - Creates pictures in such created album, returning their URL

slugify() {
	python -c "import sys; from slugify import slugify; print slugify(sys.argv[1])" "$@"
}

ABLDIR=`dirname $0`
ABLFNCS=${ABLDIR}/abload-functions.sh

if [ -f ${ABLFNCS} ]; then
	. ${ABLFNCS}
else
	echo "(E) File ${ABLFNCS} does not exist."
	exit 1
fi

ABLCONFIG=${HOME}/.abloadrc
read_config_file ${ABLCONFIG} u

if [ $? -eq 1 ]; then
	echo Error reading config file ${ABLCONFIG} .
	exit 1
fi

location=
title=

for i in "$@"
do
	case $i in
		-a=*|--album=*)
		albumpath="${i#*=}"
		;;
		-l=*|--location=*)
		location="${i#*=}"
		;;
		-t=*|--title=*)
		title="${i#*=}"
		;;
		-u=*|--author=*)
		ablauthor="${i#*=}"
		;;
		*)
				# unknown option
		;;
	esac
done

# Check parameters
if [ -z "${albumpath}" ]; then
	echo "(E) Missing album path (option -a or --album)."
	exit 1
fi
if [ -z "${location}" ]; then
	echo "(E) Missing album location (option -l or --location)."
	exit 1
fi
if [ -z "${title}" ]; then
	echo "(E) Missing album title (option -t or --title)."
	exit 1
fi

# Ako jedan od direktorijuma ne postoji, izlazimo
if [ ! -d "${abllocalsrc}" ]; then
	echo "(E) Missing local picture source: ${abllocalsrc}."
	exit 1
fi

if [ "$albumpath" = "." ]; then
	MYDIR=`pwd`
	ALBUMNAME=`basename $MYDIR`
	DIRALBUM=`dirname $MYDIR`
else
	ALBUMNAME=`basename "${albumpath}"`
	DIRALBUM=`dirname "${albumpath}"`	
fi

if [ "${DIRALBUM}" = "." ]; then
	DIRALBUM=`pwd`
fi
YEAR=`basename ${DIRALBUM}`

# Try extracting month and day, we'll need for album's date
MONTH=`echo ${ALBUMNAME} | cut -d"-" -f1`
# Check if month is in format "mm"
if [[ ! "${MONTH}" =~ ^[0-9][0-9]$ ]]; then
	MONTH="01"
fi

DAY=`echo ${ALBUMNAME} | cut -d"-" -f2`
# Check if day is in format "dd"
if [[ ! "${DAY}" =~ ^[0-9][0-9]$ ]]; then
	DAY="01"
fi

ALBUMPATH="${abllocalsrc}/${YEAR}/${ALBUMNAME}"
if [ ! -d "${ALBUMPATH}" ]; then
	echo "(E) Invalid album path: ${ALBUMPATH} ."
	exit 1
fi

# Make full path for album
PELALBUM=${YEAR}/${ALBUMNAME}
echo "Ime albuma u PELALBUM-u: ${PELALBUM}"

# Proveri da li ovaj album postoji
DESTALBUM=${abllocaldest}/${PELALBUM}
DESTYEARALBUM=${abllocaldest}/${YEAR}

if [ ! -d "${DESTALBUM}" ]; then
	mkdir -p "${DESTALBUM}" || exit 1
	ALBCREATED=1
else
	ALBCREATED=
fi

# If we can't get into destination directory, get out
cd "${abllocaldest}" || exit 1

# Create metadata file for toplevel year album, if it does not exist
if [ ! -f ${YEAR}.${ablmetadataext} ]; then
	echo "Creating metadata file ${YEAR}.${ablmetadataext} ..."
	# Point album to initially show placeholder, i.e. picture
	# of empty album
	cat <<METEOF > ${YEAR}.${ablmetadataext}
Title: ${YEAR}
Date: ${YEAR}-01-01
Category: yearalbum
Slug: ${YEAR}
Authors: ${ablauthor}
Summary: ${YEAR}
Ablpicurl: ${defaultpicurl}
OrgWdth: ${defaultpicwidth}
OrgHght: ${defaultpicheight}
Lang: ${abllang}

${YEAR}.
METEOF
else
	echo "(W) Metadata file ${YEAR}.${ablmetadataext} exits, skipping ..."
fi

# If we can't get into destination directory, get out
cd ${DESTYEARALBUM} || exit 1

# Create metadata file for album, if it does not exist
if [ ! -f ${ALBUMNAME}.${ablmetadataext} ]; then
	echo "Creating metadata file ${ALBUMNAME}.${ablmetadataext} ..."
	ABLGALLID=`abload-gallery-create.sh "${YEAR}-${ALBUMNAME}"`
	echo "Created album ${YEAR}-${ALBUMNAME} on Abload.de ... (gallery ID: ${ABLGALLID})"
	
	if [ ! -z "${ABLGALLID}" ]; then
		cat << METEOF > ${ALBUMNAME}.${ablmetadataext}
Title: ${title}
Date: ${YEAR}-${MONTH}-${DAY}
Category: album
Slug: ${YEAR}-${ALBUMNAME}
Authors: ${ablauthor}
Summary: ${title}.
Location: ${location}
Ablpicurl: ${defaultpicurl}
OrgWdth: ${defaultpicwidth}
OrgHght: ${defaultpicheight}
${metagallid}: ${ABLGALLID}
Tags:
Lang: ${abllang}

METEOF
	else
		echo "(E) Could not create ${YEAR}-${ALBUMNAME} as album on Abload.de ..."
		exit 1
	fi
else
	echo "(W) Metadata file ${ALBUMNAME}.${ablmetadataext} exits, skipping ..."
	# Get ABLGALLID for next step (integer of minimum 7 digits)
	ABLGALLID=`grep -Po '\d{7,}' ${ALBUMNAME}.${ablmetadataext}`
	echo "Got gallery ID created previously: ${ABLGALLID}"
fi

# If we can't get into destination directory, get out
cd ${DESTALBUM} || exit 1

# Upload each picture from source directory,
# skipping those already uploaded
upload_pics() {
	local picmask=$1
	local picext=$2
	
	find "${ALBUMPATH}" -name "*$picmask" -type f -print0 | while read -d '' -r PIC
	do
		PICBASENAME=`basename -s .$picext "$PIC"`
		# Clean picture name from all special characters and transliterate it
		PICLEANAME=`slugify "${PICBASENAME}"`
		
		if [ ! -f "${PICLEANAME}.${ablmetadataext}" ]; then
			TEMPNAME=/tmp/$PICLEANAME
			# Create picture with watermark
			convert -size 233x144 xc:none -fill grey50 -colorize 40 -pointsize 18 \
				-gravity NorthWest -annotate +0+0  "Â© ${ablauthor}" \
				-gravity SouthEast -annotate +0+65 "${ablemail}" \
				miff:- | composite -dissolve 9 -tile - ${PIC} ${TEMPNAME}

			# Gather original width and height
			PICW=`identify -format "%w" "$PIC"`
			PICH=`identify -format "%h" "$PIC"`
			
			ABLPICURL=`abload-pic-upload.sh ${TEMPNAME} ${ABLGALLID}`
			echo "Uploaded ${PICBASENAME}.${picext} to Abload.de ... (picture URL: ${ABLPICURL})"
			
			if [ -z ${ABLPICURL} ]; then
				echo "(E): Error uploading picture to Abload.de: URL is empty."
				exit 1
			fi
			
			cat <<METEOF > "${PICLEANAME}.${ablmetadataext}"
Title: ${PICBASENAME}.${picext}
Date: ${YEAR}-${MONTH}-${DAY}
Category: picture
Slug: ${PICLEANAME}
Basename: ${PICLEANAME}
Authors: ${ablauthor}
Summary:
Location: ${location}
Ablpicurl: ${ABLPICURL}
OrgWdth: ${PICW}
OrgHght: ${PICH}
Tags:
METEOF
			# Add EXIF metadata using exiftool
			FIRSTEXIFLINE=1
			while read line
			do
				if [ ${FIRSTEXIFLINE} -eq 1 ]; then
					echo "ExifValues: "$line >> "$PICLEANAME.${ablmetadataext}"
					FIRSTEXIFLINE=0
				else
					echo "            "$line >> "$PICLEANAME.${ablmetadataext}"
				fi
			done < <(exiftool "$PIC")

			echo "Lang: ${abllang}" >> "$PICLEANAME.${ablmetadataext}"
			# Add empty line that separates metadata from page content
			echo "" >> "$PICLEANAME.${ablmetadataext}"
			
			echo "Created metadata file $PICLEANAME.${ablmetadataext}."
			rm -f ${TEMPNAME}
		else
			echo "(W) Metadata file $PICLEANAME.${ablmetadataext} exists, skipping ..."
		fi
	done
}

upload_pics [Jj][Pp][Gg] jpg
upload_pics [Tt][Ii][Ff] tif
upload_pics [Tt][Ii][Ff][Ff] tiff
upload_pics [Gg][Ii][Ff] gif

exit 0
